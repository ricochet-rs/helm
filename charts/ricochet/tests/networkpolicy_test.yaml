suite: network policy
templates:
  - networkpolicy.yaml
tests:
  - it: should create NetworkPolicy when enabled
    set:
      networkPolicy:
        enabled: true
    asserts:
      - isKind:
          of: NetworkPolicy
      - equal:
          path: metadata.name
          value: RELEASE-NAME-ricochet
      - hasDocuments:
          count: 1

  - it: should not create NetworkPolicy when disabled
    set:
      networkPolicy.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should set pod selector correctly
    set:
      networkPolicy:
        enabled: true
    asserts:
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/name"]
          value: ricochet
      - equal:
          path: spec.podSelector.matchLabels["app.kubernetes.io/instance"]
          value: RELEASE-NAME

  - it: should have both Ingress and Egress policy types
    set:
      networkPolicy:
        enabled: true
    asserts:
      - contains:
          path: spec.policyTypes
          content: Ingress
      - contains:
          path: spec.policyTypes
          content: Egress

  - it: should allow ingress on port 6188 from pods and specific namespaces
    set:
      networkPolicy:
        enabled: true
    asserts:
      - equal:
          path: spec.ingress[0].ports[0].protocol
          value: TCP
      - equal:
          path: spec.ingress[0].ports[0].port
          value: 6188
      - isNotNullOrEmpty:
          path: spec.ingress[0].from[0].podSelector
      - equal:
          path: spec.ingress[0].from[1].namespaceSelector.matchLabels.name
          value: ingress-nginx
      - equal:
          path: spec.ingress[0].from[3].namespaceSelector.matchLabels.name
          value: gateway-system

  - it: should allow egress to DNS ports
    set:
      networkPolicy:
        enabled: true
    asserts:
      - equal:
          path: spec.egress[0].ports[0].protocol
          value: TCP
      - equal:
          path: spec.egress[0].ports[0].port
          value: 53
      - equal:
          path: spec.egress[0].ports[1].protocol
          value: UDP
      - equal:
          path: spec.egress[0].ports[1].port
          value: 53

  - it: should allow egress to HTTP and HTTPS ports
    set:
      networkPolicy:
        enabled: true
    asserts:
      - equal:
          path: spec.egress[1].ports[0].protocol
          value: TCP
      - equal:
          path: spec.egress[1].ports[0].port
          value: 443
      - equal:
          path: spec.egress[1].ports[1].protocol
          value: TCP
      - equal:
          path: spec.egress[1].ports[1].port
          value: 80
      - exists:
          path: spec.egress[1].to[0].podSelector
      - exists:
          path: spec.egress[1].to[1].namespaceSelector

  - it: should use custom ingress rules when provided
    set:
      networkPolicy:
        enabled: true
        ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: frontend
          ports:
            - protocol: TCP
              port: 8080
    asserts:
      - equal:
          path: spec.ingress[0].from[0].podSelector.matchLabels.app
          value: frontend
      - equal:
          path: spec.ingress[0].ports[0].port
          value: 8080

  - it: should use custom egress rules when provided
    set:
      networkPolicy:
        enabled: true
        egress:
        - to:
            - podSelector:
                matchLabels:
                  app: database
          ports:
            - protocol: TCP
              port: 5432
    asserts:
      - equal:
          path: spec.egress[0].to[0].podSelector.matchLabels.app
          value: database
      - equal:
          path: spec.egress[0].ports[0].port
          value: 5432

  - it: should include correct labels
    set:
      networkPolicy:
        enabled: true
    asserts:
      - equal:
          path: metadata.labels["helm.sh/chart"]
          value: ricochet-0.1.0
      - equal:
          path: metadata.labels["app.kubernetes.io/name"]
          value: ricochet
      - equal:
          path: metadata.labels["app.kubernetes.io/instance"]
          value: RELEASE-NAME
      - equal:
          path: metadata.labels["app.kubernetes.io/managed-by"]
          value: Helm
