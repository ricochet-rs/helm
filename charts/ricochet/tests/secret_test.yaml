suite: secret mapping tests
templates:
  - secret-config.yaml
  - deployment.yaml
tests:
  # Test 1: No secret created when no secrets defined
  - it: should not create secret when no secrets defined
    set:
      config:
        server:
          port: 6188
    asserts:
      - hasDocuments:
          count: 0
        template: secret-config.yaml

  # Test 2: Secret is created with simple secret reference
  - it: should create secret with simple reference
    set:
      config:
        secrets:
          database:
            password: db-secret
    asserts:
      - hasDocuments:
          count: 1
        template: secret-config.yaml
      - isKind:
          of: Secret
        template: secret-config.yaml
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '\[database\]'
        template: secret-config.yaml
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '# Using existing secret: db-secret'
        template: secret-config.yaml

  # Test 3: Secret with explicit secretName and key
  - it: should handle explicit secret references
    set:
      config:
        secrets:
          auth:
            api_key:
              secretName: api-credentials
              key: secret_key
    asserts:
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '\[auth\]'
        template: secret-config.yaml
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '# From secret: api-credentials, key: secret_key'
        template: secret-config.yaml

  # Test 4: Multiple sections with secrets
  - it: should handle multiple secret sections
    set:
      config:
        secrets:
          database:
            password: db-secret
            connection_string:
              secretName: db-secret
              key: conn_str
          cache:
            password: redis-secret
          auth:
            jwt_secret: auth-secret
    asserts:
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '\[database\]'
        template: secret-config.yaml
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '\[cache\]'
        template: secret-config.yaml
      - matchRegex:
          path: stringData["ricochet-config-secret.toml"]
          pattern: '\[auth\]'
        template: secret-config.yaml

  # Test 5: Secret volumes are created in deployment
  - it: should create unique secret volumes in deployment
    set:
      config:
        secrets:
          database:
            password: db-secret
          cache:
            password: redis-secret
          auth:
            jwt_secret: auth-secret
            api_key: auth-secret # Reused secret
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-db-secret
            secret:
              secretName: db-secret
        template: deployment.yaml
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-redis-secret
            secret:
              secretName: redis-secret
        template: deployment.yaml
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-auth-secret
            secret:
              secretName: auth-secret
        template: deployment.yaml
      # Verify no duplicate volumes for auth-secret
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 5 # config, secret-db-secret, secret-redis-secret, secret-auth-secret, config-merged
        template: deployment.yaml

  # Test 6: Secret volume mounts are unique in init container
  - it: should mount secret volumes uniquely in init container
    set:
      config:
        server:
          port: 6188
        secrets:
          database:
            password: db-secret
          auth:
            jwt_secret: auth-secret
            api_key: auth-secret # Same secret, different key
    asserts:
      - contains:
          path: spec.template.spec.initContainers[0].volumeMounts
          content:
            name: secret-db-secret
            mountPath: /secrets/db-secret
        template: deployment.yaml
      - contains:
          path: spec.template.spec.initContainers[0].volumeMounts
          content:
            name: secret-auth-secret
            mountPath: /secrets/auth-secret
        template: deployment.yaml

  # Test 7: Init container script processes secret references
  - it: should generate correct secret processing script
    set:
      config:
        secrets:
          database:
            password: db-secret
    asserts:
      - matchRegex:
          path: spec.template.spec.initContainers[0].args[0]
          pattern: 'SECRET_VALUE=\$\(cat /secrets/db-secret/password'
        template: deployment.yaml
      - matchRegex:
          path: spec.template.spec.initContainers[0].args[0]
          pattern: 'echo "\[database\]"'
        template: deployment.yaml

  # Test 8: Complex secret reference with custom key
  - it: should handle complex secret references correctly
    set:
      config:
        secrets:
          external:
            stripe_key:
              secretName: payment-secrets
              key: stripe_secret_key
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: secret-payment-secrets
            secret:
              secretName: payment-secrets
        template: deployment.yaml
      - matchRegex:
          path: spec.template.spec.initContainers[0].args[0]
          pattern: 'cat /secrets/payment-secrets/stripe_secret_key'
        template: deployment.yaml

  # Test 9: Empty secrets object doesn't create resources
  - it: should not create resources for empty secrets object
    set:
      config:
        server:
          port: 6188
        secrets: {}
    asserts:
      - hasDocuments:
          count: 0
        template: secret-config.yaml
      - notExists:
          path: spec.template.metadata.annotations["checksum/secret-config"]
        template: deployment.yaml
